ampl: model cluster_median.mod;
ampl: data cluster_median.dat;
ampl: solve;
MINOS 5.5: ignoring integrality of 100 variables
MINOS 5.5: optimal solution found.
94 iterations, objective 9.3806
ampl: option solver cplex;
ampl: solve;
CPLEX 12.5.1.0: optimal integer solution; objective 9.3806
12 MIP simplex iterations
0 branch-and-bound nodes
ampl: display x;
x [*,*]
:    1   2   3   4   5   6   7   8   9  10    :=
1    0   1   0   0   0   0   0   0   0   0
2    0   1   0   0   0   0   0   0   0   0
3    0   1   0   0   0   0   0   0   0   0
4    0   0   0   0   1   0   0   0   0   0
5    0   0   0   0   1   0   0   0   0   0
6    0   0   0   0   0   0   0   0   1   0
7    0   0   0   0   0   0   0   0   1   0
8    0   0   0   0   0   0   0   0   1   0
9    0   0   0   0   0   0   0   0   1   0
10   0   0   0   0   1   0   0   0   0   0
;

====================================================================================

ampl: reset;
ampl: model kruskal.mod;
=-=-=-=-=-=-=-=-= Start Iteration 1 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := ; # empty

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,7)    (5,7)    (6,8)    (7,10)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,8)    (5,8)    (6,9)    (8,9)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,9)    (5,9)    (6,10)   (8,10)
(1,6)    (2,3)    (2,8)    (3,6)    (4,5)    (4,10)   (5,10)   (7,8)    (9,10)
(1,7)    (2,4)    (2,9)    (3,7)    (4,6)    (5,6)    (6,7)    (7,9);

component [*] :=
;

Testing edge (1,2)
set T := (1,2);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,7)    (5,7)    (6,8)    (7,10)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,8)    (5,8)    (6,9)    (8,9)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,9)    (5,9)    (6,10)   (8,10)
(1,6)    (2,3)    (2,8)    (3,6)    (4,5)    (4,10)   (5,10)   (7,8)    (9,10)
(1,7)    (2,4)    (2,9)    (3,7)    (4,6)    (5,6)    (6,7)    (7,9);

component [*] :=
 1  1
 2  1
 3  0
 4  0
 5  0
 6  0
 7  0
 8  0
 9  0
10  0
;

=-=-=-=-=-=-=-=-=-= End Iteration 1 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 2 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,7)    (5,7)    (6,8)    (7,10)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,8)    (5,8)    (6,9)    (8,10)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,9)    (5,9)    (6,10)   (9,10)
(1,6)    (2,3)    (2,8)    (3,6)    (4,5)    (4,10)   (5,10)   (7,8)
(1,7)    (2,4)    (2,9)    (3,7)    (4,6)    (5,6)    (6,7)    (7,9);

component [*] :=
 1  1
 2  1
 3  0
 4  0
 5  0
 6  0
 7  0
 8  0
 9  0
10  0
;

Testing edge (8,9)
set T := (1,2) (8,9);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,7)    (5,7)    (6,8)    (7,10)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,8)    (5,8)    (6,9)    (8,10)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,9)    (5,9)    (6,10)   (9,10)
(1,6)    (2,3)    (2,8)    (3,6)    (4,5)    (4,10)   (5,10)   (7,8)
(1,7)    (2,4)    (2,9)    (3,7)    (4,6)    (5,6)    (6,7)    (7,9);

component [*] :=
 1  1
 2  1
 3  0
 4  0
 5  0
 6  0
 7  0
 8  2
 9  2
10  0
;

=-=-=-=-=-=-=-=-=-= End Iteration 2 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 3 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2) (8,9);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,7)    (5,7)    (6,8)    (8,10)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,8)    (5,8)    (6,10)   (9,10)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,9)    (5,9)    (7,8)
(1,6)    (2,3)    (2,8)    (3,6)    (4,5)    (4,10)   (5,10)   (7,9)
(1,7)    (2,4)    (2,9)    (3,7)    (4,6)    (5,6)    (6,7)    (7,10);

component [*] :=
 1  1
 2  1
 3  0
 4  0
 5  0
 6  0
 7  0
 8  2
 9  2
10  0
;

Testing edge (6,9)
set T := (1,2) (8,9) (6,9);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,7)    (5,7)    (6,8)    (8,10)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,8)    (5,8)    (6,10)   (9,10)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,9)    (5,9)    (7,8)
(1,6)    (2,3)    (2,8)    (3,6)    (4,5)    (4,10)   (5,10)   (7,9)
(1,7)    (2,4)    (2,9)    (3,7)    (4,6)    (5,6)    (6,7)    (7,10);

component [*] :=
 1  1
 2  1
 3  0
 4  0
 5  0
 6  2
 7  0
 8  2
 9  2
10  0
;

=-=-=-=-=-=-=-=-=-= End Iteration 3 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 4 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2) (8,9) (6,9);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,7)    (5,7)    (6,10)   (9,10)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,8)    (5,8)    (7,8)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,9)    (5,9)    (7,9)
(1,6)    (2,3)    (2,8)    (3,6)    (4,5)    (4,10)   (6,7)    (7,10)
(1,7)    (2,4)    (2,9)    (3,7)    (4,6)    (5,6)    (6,8)    (8,10);

component [*] :=
 1  1
 2  1
 3  0
 4  0
 5  0
 6  2
 7  0
 8  2
 9  2
10  0
;

Testing edge (5,10)
set T := (1,2) (8,9) (6,9) (5,10);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,7)    (5,7)    (6,10)   (9,10)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,8)    (5,8)    (7,8)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,9)    (5,9)    (7,9)
(1,6)    (2,3)    (2,8)    (3,6)    (4,5)    (4,10)   (6,7)    (7,10)
(1,7)    (2,4)    (2,9)    (3,7)    (4,6)    (5,6)    (6,8)    (8,10);

component [*] :=
 1  1
 2  1
 3  0
 4  0
 5  3
 6  2
 7  0
 8  2
 9  2
10  3
;

=-=-=-=-=-=-=-=-=-= End Iteration 4 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 5 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2) (8,9) (6,9) (5,10);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,8)    (5,8)    (7,8)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,9)    (5,9)    (7,9)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,10)   (6,7)    (7,10)
(1,6)    (2,3)    (2,8)    (3,6)    (4,6)    (5,6)    (6,8)    (8,10)
(1,7)    (2,4)    (2,9)    (3,7)    (4,7)    (5,7)    (6,10)   (9,10);

component [*] :=
 1  1
 2  1
 3  0
 4  0
 5  3
 6  2
 7  0
 8  2
 9  2
10  3
;

Testing edge (4,5)
set T := (1,2) (8,9) (6,9) (5,10) (4,5);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,8)    (5,8)    (7,8)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,9)    (5,9)    (7,9)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,10)   (6,7)    (7,10)
(1,6)    (2,3)    (2,8)    (3,6)    (4,6)    (5,6)    (6,8)    (8,10)
(1,7)    (2,4)    (2,9)    (3,7)    (4,7)    (5,7)    (6,10)   (9,10);

component [*] :=
 1  1
 2  1
 3  0
 4  3
 5  3
 6  2
 7  0
 8  2
 9  2
10  3
;

=-=-=-=-=-=-=-=-=-= End Iteration 5 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 6 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2) (8,9) (6,9) (5,10) (4,5);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,8)    (5,8)    (7,9)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,9)    (5,9)    (7,10)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,10)   (6,7)    (8,10)
(1,6)    (2,3)    (2,8)    (3,6)    (4,6)    (5,6)    (6,8)    (9,10)
(1,7)    (2,4)    (2,9)    (3,7)    (4,7)    (5,7)    (6,10);

component [*] :=
 1  1
 2  1
 3  0
 4  3
 5  3
 6  2
 7  0
 8  2
 9  2
10  3
;

Testing edge (7,8)
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,8)    (5,8)    (7,9)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,9)    (5,9)    (7,10)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,10)   (6,7)    (8,10)
(1,6)    (2,3)    (2,8)    (3,6)    (4,6)    (5,6)    (6,8)    (9,10)
(1,7)    (2,4)    (2,9)    (3,7)    (4,7)    (5,7)    (6,10);

component [*] :=
 1  1
 2  1
 3  0
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

=-=-=-=-=-=-=-=-=-= End Iteration 6 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 7 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,8)    (5,8)    (7,10)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,9)    (5,9)    (8,10)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,10)   (6,7)    (9,10)
(1,6)    (2,3)    (2,8)    (3,6)    (4,6)    (5,6)    (6,10)
(1,7)    (2,4)    (2,9)    (3,7)    (4,7)    (5,7)    (7,9);

component [*] :=
 1  1
 2  1
 3  0
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

Testing edge (6,8)
Adding edge (6,8) would create a cycle.

set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,8)    (5,8)    (7,10)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,9)    (5,9)    (8,10)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,10)   (6,7)    (9,10)
(1,6)    (2,3)    (2,8)    (3,6)    (4,6)    (5,6)    (6,10)
(1,7)    (2,4)    (2,9)    (3,7)    (4,7)    (5,7)    (7,9);

component [*] :=
 1  1
 2  1
 3  0
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

=-=-=-=-=-=-=-=-=-= End Iteration 7 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 8 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,8)    (5,8)    (8,10)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,9)    (5,9)    (9,10)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,10)   (6,7)
(1,6)    (2,3)    (2,8)    (3,6)    (4,6)    (5,6)    (6,10)
(1,7)    (2,4)    (2,9)    (3,7)    (4,7)    (5,7)    (7,10);

component [*] :=
 1  1
 2  1
 3  0
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

Testing edge (7,9)
Adding edge (7,9) would create a cycle.

set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8);

set F :=
(1,3)    (1,8)    (2,5)    (2,10)   (3,8)    (4,8)    (5,8)    (8,10)
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,9)    (5,9)    (9,10)
(1,5)    (1,10)   (2,7)    (3,5)    (3,10)   (4,10)   (6,7)
(1,6)    (2,3)    (2,8)    (3,6)    (4,6)    (5,6)    (6,10)
(1,7)    (2,4)    (2,9)    (3,7)    (4,7)    (5,7)    (7,10);

component [*] :=
 1  1
 2  1
 3  0
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

=-=-=-=-=-=-=-=-=-= End Iteration 8 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 9 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8);

set F :=
(1,3)    (1,7)    (2,3)    (2,7)    (3,4)    (3,8)    (4,7)    (5,7)    (6,10)
(1,4)    (1,8)    (2,4)    (2,8)    (3,5)    (3,9)    (4,8)    (5,8)    (7,10)
(1,5)    (1,9)    (2,5)    (2,9)    (3,6)    (3,10)   (4,9)    (5,9)    (8,10)
(1,6)    (1,10)   (2,6)    (2,10)   (3,7)    (4,6)    (5,6)    (6,7)    (9,10);

component [*] :=
 1  1
 2  1
 3  0
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

Testing edge (4,10)
Adding edge (4,10) would create a cycle.

set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8);

set F :=
(1,3)    (1,7)    (2,3)    (2,7)    (3,4)    (3,8)    (4,7)    (5,7)    (6,10)
(1,4)    (1,8)    (2,4)    (2,8)    (3,5)    (3,9)    (4,8)    (5,8)    (7,10)
(1,5)    (1,9)    (2,5)    (2,9)    (3,6)    (3,10)   (4,9)    (5,9)    (8,10)
(1,6)    (1,10)   (2,6)    (2,10)   (3,7)    (4,6)    (5,6)    (6,7)    (9,10);

component [*] :=
 1  1
 2  1
 3  0
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

=-=-=-=-=-=-=-=-=-= End Iteration 9 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 10 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8);

set F :=
(1,3)    (1,7)    (2,4)    (2,8)    (3,5)    (3,9)    (4,8)    (5,8)    (7,10)
(1,4)    (1,8)    (2,5)    (2,9)    (3,6)    (3,10)   (4,9)    (5,9)    (8,10)
(1,5)    (1,9)    (2,6)    (2,10)   (3,7)    (4,6)    (5,6)    (6,7)    (9,10)
(1,6)    (1,10)   (2,7)    (3,4)    (3,8)    (4,7)    (5,7)    (6,10);

component [*] :=
 1  1
 2  1
 3  0
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

Testing edge (2,3)
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8) (2,3);

set F :=
(1,3)    (1,7)    (2,4)    (2,8)    (3,5)    (3,9)    (4,8)    (5,8)    (7,10)
(1,4)    (1,8)    (2,5)    (2,9)    (3,6)    (3,10)   (4,9)    (5,9)    (8,10)
(1,5)    (1,9)    (2,6)    (2,10)   (3,7)    (4,6)    (5,6)    (6,7)    (9,10)
(1,6)    (1,10)   (2,7)    (3,4)    (3,8)    (4,7)    (5,7)    (6,10);

component [*] :=
 1  1
 2  1
 3  1
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

=-=-=-=-=-=-=-=-=-= End Iteration 10 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 11 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8) (2,3);

set F :=
(1,4)    (1,8)    (2,5)    (2,9)    (3,6)    (3,10)   (4,9)    (5,9)    (8,10)
(1,5)    (1,9)    (2,6)    (2,10)   (3,7)    (4,6)    (5,6)    (6,7)    (9,10)
(1,6)    (1,10)   (2,7)    (3,4)    (3,8)    (4,7)    (5,7)    (6,10)
(1,7)    (2,4)    (2,8)    (3,5)    (3,9)    (4,8)    (5,8)    (7,10);

component [*] :=
 1  1
 2  1
 3  1
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

Testing edge (1,3)
Adding edge (1,3) would create a cycle.

set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8) (2,3);

set F :=
(1,4)    (1,8)    (2,5)    (2,9)    (3,6)    (3,10)   (4,9)    (5,9)    (8,10)
(1,5)    (1,9)    (2,6)    (2,10)   (3,7)    (4,6)    (5,6)    (6,7)    (9,10)
(1,6)    (1,10)   (2,7)    (3,4)    (3,8)    (4,7)    (5,7)    (6,10)
(1,7)    (2,4)    (2,8)    (3,5)    (3,9)    (4,8)    (5,8)    (7,10);

component [*] :=
 1  1
 2  1
 3  1
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

=-=-=-=-=-=-=-=-=-= End Iteration 11 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 12 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8) (2,3);

set F :=
(1,4)    (1,8)    (2,5)    (2,9)    (3,6)    (3,10)   (4,9)    (5,9)    (9,10)
(1,5)    (1,9)    (2,6)    (2,10)   (3,7)    (4,6)    (5,6)    (6,10)
(1,6)    (1,10)   (2,7)    (3,4)    (3,8)    (4,7)    (5,7)    (7,10)
(1,7)    (2,4)    (2,8)    (3,5)    (3,9)    (4,8)    (5,8)    (8,10);

component [*] :=
 1  1
 2  1
 3  1
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

Testing edge (6,7)
Adding edge (6,7) would create a cycle.

set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8) (2,3);

set F :=
(1,4)    (1,8)    (2,5)    (2,9)    (3,6)    (3,10)   (4,9)    (5,9)    (9,10)
(1,5)    (1,9)    (2,6)    (2,10)   (3,7)    (4,6)    (5,6)    (6,10)
(1,6)    (1,10)   (2,7)    (3,4)    (3,8)    (4,7)    (5,7)    (7,10)
(1,7)    (2,4)    (2,8)    (3,5)    (3,9)    (4,8)    (5,8)    (8,10);

component [*] :=
 1  1
 2  1
 3  1
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

=-=-=-=-=-=-=-=-=-= End Iteration 12 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 13 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8) (2,3);

set F :=
(1,4)    (1,9)    (2,6)    (2,10)   (3,7)    (4,6)    (5,6)    (6,10)
(1,5)    (1,10)   (2,7)    (3,4)    (3,8)    (4,7)    (5,7)    (7,10)
(1,6)    (2,4)    (2,8)    (3,5)    (3,9)    (4,8)    (5,8)    (8,10)
(1,8)    (2,5)    (2,9)    (3,6)    (3,10)   (4,9)    (5,9)    (9,10);

component [*] :=
 1  1
 2  1
 3  1
 4  3
 5  3
 6  2
 7  2
 8  2
 9  2
10  3
;

Testing edge (1,7)
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8) (2,3) (1,7);

set F :=
(1,4)    (1,9)    (2,6)    (2,10)   (3,7)    (4,6)    (5,6)    (6,10)
(1,5)    (1,10)   (2,7)    (3,4)    (3,8)    (4,7)    (5,7)    (7,10)
(1,6)    (2,4)    (2,8)    (3,5)    (3,9)    (4,8)    (5,8)    (8,10)
(1,8)    (2,5)    (2,9)    (3,6)    (3,10)   (4,9)    (5,9)    (9,10);

component [*] :=
 1  1
 2  1
 3  1
 4  3
 5  3
 6  1
 7  1
 8  1
 9  1
10  3
;

=-=-=-=-=-=-=-=-=-= End Iteration 13 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 14 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8) (2,3) (1,7);

set F :=
(1,4)    (1,9)    (2,6)    (3,4)    (3,8)    (4,7)    (5,7)    (7,10)
(1,5)    (1,10)   (2,8)    (3,5)    (3,9)    (4,8)    (5,8)    (8,10)
(1,6)    (2,4)    (2,9)    (3,6)    (3,10)   (4,9)    (5,9)    (9,10)
(1,8)    (2,5)    (2,10)   (3,7)    (4,6)    (5,6)    (6,10);

component [*] :=
 1  1
 2  1
 3  1
 4  3
 5  3
 6  1
 7  1
 8  1
 9  1
10  3
;

Testing edge (2,7)
Adding edge (2,7) would create a cycle.

set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8) (2,3) (1,7);

set F :=
(1,4)    (1,9)    (2,6)    (3,4)    (3,8)    (4,7)    (5,7)    (7,10)
(1,5)    (1,10)   (2,8)    (3,5)    (3,9)    (4,8)    (5,8)    (8,10)
(1,6)    (2,4)    (2,9)    (3,6)    (3,10)   (4,9)    (5,9)    (9,10)
(1,8)    (2,5)    (2,10)   (3,7)    (4,6)    (5,6)    (6,10);

component [*] :=
 1  1
 2  1
 3  1
 4  3
 5  3
 6  1
 7  1
 8  1
 9  1
10  3
;

=-=-=-=-=-=-=-=-=-= End Iteration 14 =-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=-=-=-= Start Iteration 15 =-=-=-=-=-=-=-=-=-=-=-=-=
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8) (2,3) (1,7);

set F :=
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,8)    (5,8)    (8,10)
(1,5)    (1,10)   (2,8)    (3,6)    (3,10)   (4,9)    (5,9)    (9,10)
(1,6)    (2,4)    (2,9)    (3,7)    (4,6)    (5,6)    (6,10)
(1,8)    (2,5)    (2,10)   (3,8)    (4,7)    (5,7)    (7,10);

component [*] :=
 1  1
 2  1
 3  1
 4  3
 5  3
 6  1
 7  1
 8  1
 9  1
10  3
;

Testing edge (3,5)
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8) (2,3) (1,7) (3,5);

set F :=
(1,4)    (1,9)    (2,6)    (3,4)    (3,9)    (4,8)    (5,8)    (8,10)
(1,5)    (1,10)   (2,8)    (3,6)    (3,10)   (4,9)    (5,9)    (9,10)
(1,6)    (2,4)    (2,9)    (3,7)    (4,6)    (5,6)    (6,10)
(1,8)    (2,5)    (2,10)   (3,8)    (4,7)    (5,7)    (7,10);

component [*] :=
 1  1
 2  1
 3  1
 4  1
 5  1
 6  1
 7  1
 8  1
 9  1
10  1
;

=-=-=-=-=-=-=-=-=-= End Iteration 15 =-=-=-=-=-=-=-=-=-=-=-=-=

A MST for this graph has cost 16.
set T := (1,2) (8,9) (6,9) (5,10) (4,5) (7,8) (2,3) (1,7) (3,5);

==============================================================================================

ampl: for {(i,j) in T }{ printf "(%i %i) >> %f \n", i, j, c[i,j]}; 

1 2 >> 0.183100 
8 9 >> 0.875300 
6 9 >> 0.975700 
5 10 >> 1.222700 
4 5 >> 1.262100 
7 8 >> 1.727500 
2 3 >> 2.526600 
1 7 >> 3.483800 
3 5 >> 4.663100 

# draw pic
subplot(1,2,1);
cluster1=plot(A([1 2 3],1)',A([1 2 3],2)','r*','markersize',10);hold on;
cluster2=plot(A([4 5 10],1)',A([4 5 10],2)','b*','markersize',10);hold on;
cluster3=plot(A([6 7 8 9],1)',A([6 7 8 9],2)','g*','markersize',10);
xlabel('x1');
ylabel('x2');
grid();
title('Clustering with k-medians');
legend('cluster1','cluster2','cluster3');
subplot(1,2,2);
goodEdges=plot(A([1 2],1)',A([1 2],2)', 'g-',"linewidth", 2 );hold on;
badEdges=plot(A([1 7],1)',A([1 7],2)', 'k-',"linewidth", 1 );hold on;
plot(A([1 2 3],1)',A([1 2 3],2)','k*','markersize',10);hold on;
plot(A([4 5 10],1)',A([4 5 10],2)','k*','markersize',10);hold on;
plot(A([6 7 8 9],1)',A([6 7 8 9],2)','k*','markersize',10);
plot(A([8 9],1)',A([8 9],2)', 'g-',"linewidth", 3);hold on;
plot(A([6 9],1)',A([6 9],2)', 'g-',"linewidth", 3 );hold on;
plot(A([5 10],1)',A([5 10],2)','g-',"linewidth", 3 );hold on;
plot(A([4 5],1)',A([4 5],2)', 'g-',"linewidth", 3);hold on;
plot(A([7 8 ],1)',A([7 8 ],2)', 'g-',"linewidth", 3 );hold on;
plot(A([2 3],1)',A([2 3],2)', 'g-',"linewidth", 3 );hold on;
plot(A([3 5],1)',A([3 5],2)', 'k-',"linewidth", 1 );
legend('minimal edges','removed edges');
xlabel('x1');
ylabel('x2');
grid();
title('Clustering with minimal spanning tree');